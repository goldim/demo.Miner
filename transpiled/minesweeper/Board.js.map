{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "container",
    "Composite",
    "construct",
    "setLayout",
    "layout",
    "Grid",
    "__setupHandlers",
    "properties",
    "appearance",
    "init",
    "refine",
    "blocked",
    "check",
    "apply",
    "members",
    "game",
    "minesweeper",
    "Game",
    "getInstance",
    "addListener",
    "update",
    "e",
    "getData",
    "resetBlocked",
    "__colSize",
    "getColumnSize",
    "__rowSize",
    "getRowSize",
    "__mineCount",
    "getMineCount",
    "prepare",
    "removeAll",
    "__fillBoard",
    "__generateMines",
    "__evaluateValues",
    "_applyBlocked",
    "forEverySquare",
    "square",
    "__isSquare",
    "setBlocked",
    "bind",
    "forEverySquareWithIndexes",
    "column",
    "row",
    "add",
    "__createSquare",
    "count",
    "randomInteger",
    "getLayout",
    "getCellWidget",
    "hasState",
    "addState",
    "setValue",
    "__getSquareAroundCoords",
    "showAllMines",
    "getColumnNo",
    "getRowNo",
    "mine",
    "__createMineLabel",
    "destroy",
    "min",
    "max",
    "Math",
    "floor",
    "random",
    "handler",
    "Square",
    "filter",
    "coords",
    "checkMine",
    "length",
    "set",
    "width",
    "height",
    "setColumnNo",
    "setRowNo",
    "_onBlast",
    "_onOpen",
    "getTarget",
    "value",
    "getValue",
    "__attended",
    "expandSpaceFromSquare",
    "__createColoredLabel",
    "__checkFinished",
    "valueStr",
    "toString",
    "atom",
    "OpenedSquare",
    "__createEmptyLabel",
    "__checkOutOfBorders",
    "countRevealedSquares",
    "setState",
    "some",
    "push",
    "forEach",
    "Board"
  ],
  "sources": [
    "C:/qx/minesweeper/source/class/minesweeper/Board.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright: 2023 Dmitrii Zolotov\n\n   License: MIT license\n\n   Authors: Dmitrii Zolotov (goldim) zolotovdy@yandex.ru\n\n************************************************************************ */\n\n/**\n * This is an example of a contrib library, providing a very special button\n * @asset(minesweeper/*)\n */\nqx.Class.define(\"minesweeper.Board\", {\n    extend: qx.ui.container.Composite,\n\n    construct() {\n        // noinspection JSAnnotator\n        super();\n        this.setLayout(new qx.ui.layout.Grid());\n        this.__setupHandlers();\n    },\n\n    properties: {\n        appearance: {\n            init: \"board\",\n            refine: true\n        },\n\n        blocked: {\n            init: false,\n            check: \"Boolean\",\n            apply: \"_applyBlocked\"\n        }\n    },\n\n    members: {\n        __setupHandlers() {\n            const game = minesweeper.Game.getInstance();\n            game.addListener(\"changeDifficulty\", function() {\n                this.update();\n            }, this);\n            game.addListener(\"changeState\", function(e) {\n                if (e.getData() === \"start\") {\n                    this.update();\n                }\n            }, this);\n        },\n\n        update() {\n            this.resetBlocked();\n            const game = minesweeper.Game.getInstance();\n            this.__colSize = game.getColumnSize();\n            this.__rowSize = game.getRowSize();\n            this.__mineCount = game.getMineCount();\n            this.prepare();\n        },\n\n        prepare() {\n            this.removeAll();\n            this.__fillBoard();\n            this.__generateMines();\n            this.__evaluateValues();\n        },\n\n        _applyBlocked(blocked) {\n            this.forEverySquare(function(square) {\n                if (this.__isSquare(square)) {\n                    square.setBlocked(blocked);\n                }\n            }.bind(this));\n        },\n\n        __fillBoard() {\n            this.forEverySquareWithIndexes(function(column, row) {\n                this.add(this.__createSquare(column, row), {row, column});\n            }.bind(this));\n        },\n\n        __generateMines() {\n            let count = this.__mineCount;\n            while (count) {\n                const column = this.randomInteger(0, this.__colSize);\n                const row = this.randomInteger(0, this.__rowSize);\n                const square = this.getLayout().getCellWidget(row, column);\n                if (!square.hasState(\"mined\")) {\n                    square.addState(\"mined\");\n                    square.setValue(9);\n                    count--;\n                }\n            }\n        },\n\n        __getSquareAroundCoords() {\n            return [[1, 0], [0, 1], [1, 1], [-1, 0], [0, -1], [-1, -1], [-1, 1], [1, -1]];\n        },\n\n        showAllMines() {\n            this.forEverySquare(function(square) {\n                if (this.__isSquare(square) && square.hasState(\"mined\")) {\n                    const column = square.getColumnNo();\n                    const row = square.getRowNo();\n                    const mine = this.__createMineLabel();\n                    if (square.hasState(\"blasted\")) {\n                        mine.addState(\"blasted\");\n                    }\n                    square.destroy();\n\n                    this.add(mine, {row, column});\n                }\n            }.bind(this));\n        },\n\n        randomInteger(min, max) {\n            return Math.floor(Math.random() * (max - min) + min);\n        },\n\n        forEverySquareWithIndexes(handler) {\n            for (let column = 0; column < this.__colSize; column++) {\n                for (let row = 0; row < this.__rowSize; row++) {\n                    handler(column, row);\n                }\n            }\n        },\n\n        forEverySquare(handler) {\n            this.forEverySquareWithIndexes(function(column, row) {\n                const square = this.getLayout().getCellWidget(row, column);\n                handler(square);\n            }.bind(this));\n        },\n\n        __evaluateValues() {\n            this.forEverySquare(function(square) {\n                if (square instanceof minesweeper.Square) {\n                    const count = this.__getSquareAroundCoords()\n                        .filter(function(coords) {\n                            return this.checkMine(square.getColumnNo() + coords[0], square.getRowNo() + coords[1]);\n                        }, this)\n                        .length;\n                    square.setValue(count);\n                }\n            }.bind(this));\n        },\n\n        __isSquare(square) {\n            return square instanceof minesweeper.Square;\n        },\n\n        checkMine(column, row) {\n            const square = this.getLayout().getCellWidget(row, column);\n            return this.__isSquare(square) && square.hasState(\"mined\");\n        },\n\n        __createSquare(column, row) {\n            const square = new minesweeper.Square().set({width: 32, height: 32});\n            square.setColumnNo(column);\n            square.setRowNo(row);\n            square.addListener(\"blast\", this._onBlast, this);\n            square.addListener(\"open\", this._onOpen, this);\n            return square;\n        },\n\n        _onOpen(e) {\n            const square = e.getTarget();\n            const column = square.getColumnNo();\n            const row = square.getRowNo();\n            let value = square.getValue();\n            square.destroy();\n            if (!value) {\n                value = \"\";\n                this.__attended = [];\n                this.expandSpaceFromSquare(column, row);\n            } else {\n                this.add(this.__createColoredLabel(value), {row, column});\n            }\n            this.__checkFinished();\n        },\n\n        __createColoredLabel(value) {\n            const valueStr = value.toString();\n            const atom = new minesweeper.OpenedSquare(valueStr);\n            atom.addState(`mines-around-${valueStr}`);\n            return atom;\n        },\n\n        __createEmptyLabel() {\n            return new minesweeper.OpenedSquare(null);\n        },\n\n        __createMineLabel() {\n            const mine = new minesweeper.OpenedSquare(null);\n            mine.addState(\"mined\");\n            return mine;\n        },\n\n        __checkOutOfBorders(column, row) {\n            return column < 0 || row < 0 || column === this.__colSize || row === this.__rowSize;\n        },\n\n        __checkFinished() {\n            let countRevealedSquares = 0;\n            this.forEverySquare(function(square) {\n                if (!(this.__isSquare(square))) {\n                    countRevealedSquares++;\n                }\n            }.bind(this));\n            if (countRevealedSquares === (this.__colSize * this.__rowSize) - this.__mineCount) {\n                this.setBlocked(true);\n                minesweeper.Game.getInstance().setState(\"success\");\n            }\n        },\n\n        expandSpaceFromSquare(column, row) {\n            if (this.__checkOutOfBorders(column, row)) {\n                return;\n            }\n            if (this.__attended.some(coords => coords.column === column && coords.row === row)) {\n return; \n}\n            this.__attended.push({column, row});\n            const square = this.getLayout().getCellWidget(row, column);\n            if (this.__isSquare(square)) {\n                if (!square.hasState(\"mined\")) {\n                    if (square.getValue() === 0) {\n                        square.destroy();\n                        this.add(this.__createEmptyLabel(), {row, column});\n                    } else if (square.getValue() > 0) {\n                        square.destroy();\n                        this.add(this.__createColoredLabel(square.getValue()), {row, column});\n                        return;\n                    }\n                }\n            }\n            this.__getSquareAroundCoords().forEach(function(coords) {\n                this.expandSpaceFromSquare(column + coords[0], row + coords[1]);\n            }, this);\n        },\n\n        _onBlast() {\n            this.showAllMines();\n            this.setBlocked(true);\n            minesweeper.Game.getInstance().setState(\"over\");\n        }\n    }\n});\n"
  ],
  "mappings": "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"
}